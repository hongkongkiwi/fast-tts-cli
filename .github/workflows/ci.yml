name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy
      
      - uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
      
      - name: Check formatting
        run: cargo fmt --all -- --check
        if: matrix.rust == 'stable'
      
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings
        if: matrix.rust == 'stable'
      
      - name: Build
        run: cargo build --verbose --all-features
      
      - name: Run tests
        run: cargo test --verbose --all-features
        env:
          FAST_TTS_TOKEN: test-token
          FAST_TTS_BASE_URL: http://localhost:8080

  release:
    name: Release
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: fast-tts-cli
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: fast-tts-cli
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: fast-tts-cli
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: fast-tts-cli
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: fast-tts-cli
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: fast-tts-cli.exe
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Install cross-compilation tools for ARM
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      
      - name: Create archive
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a dist/fast-tts-cli-${{ matrix.target }}.zip ./target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          else
            tar czf dist/fast-tts-cli-${{ matrix.target }}.tar.gz -C ./target/${{ matrix.target }}/release ${{ matrix.binary_name }}
          fi
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fast-tts-cli-${{ matrix.target }}
          path: dist/*
      
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
